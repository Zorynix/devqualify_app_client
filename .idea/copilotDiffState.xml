<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/diploma/work/ui/feature/auth/login/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/diploma/work/ui/feature/auth/login/LoginScreen.kt" />
              <option name="originalContent" value="package com.diploma.work.ui.feature.auth.login&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.diploma.work.data.AppSession&#10;import com.diploma.work.ui.DiplomPasswordTextField&#10;import com.diploma.work.ui.DiplomTextField&#10;import com.diploma.work.ui.components.ErrorCard&#10;import com.diploma.work.ui.navigation.Home&#10;import com.diploma.work.ui.navigation.Register&#10;import com.diploma.work.ui.navigation.safeNavigate&#10;import com.diploma.work.ui.navigation.safeNavigateBack&#10;import com.diploma.work.ui.theme.Text&#10;import com.diploma.work.ui.theme.TextStyle&#10;import com.diploma.work.ui.theme.Theme&#10;import com.diploma.work.utils.ValidationUtils&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    navController: NavController,&#10;    session: AppSession,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: LoginViewModel = hiltViewModel()&#10;) {&#10;    val password by viewModel.password.collectAsState()&#10;    val loginEnabled by viewModel.loginEnabled.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val username by viewModel.username.collectAsState()&#10;    val loginSuccess by viewModel.loginSuccess.collectAsState()&#10;    if (loginSuccess) {&#10;        navController.safeNavigate(&quot;Home&quot;, clearStack = true)&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        IconButton(onClick = { navController.safeNavigateBack() }) {&#10;            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Назад&quot;)&#10;        }        &#10;        Text(&quot;Войти&quot;, style = TextStyle.TitleLarge.value)&#10;        &#10;        DiplomTextField(&#10;            value = username,&#10;            onValueChange = { viewModel.onUsernameChanged(it) },&#10;            label = { Text(&quot;Email&quot;, style = TextStyle.BodyLarge.value) },&#10;            modifier = Modifier.padding(top = 16.dp)&#10;        )&#10;        &#10;        val emailValidation = ValidationUtils.validateEmail(username)&#10;        if (!emailValidation.isValid &amp;&amp; username.isNotBlank()) {&#10;            Text(&#10;                text = emailValidation.errorMessage ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                fontSize = 12.sp,&#10;                modifier = Modifier&#10;                    .padding(top = 4.dp)&#10;                    .align(Alignment.Start)&#10;            )&#10;        }&#10;        &#10;        DiplomPasswordTextField(&#10;            value = password,&#10;            onValueChange = { viewModel.onPasswordChanged(it) },&#10;            label = { Text(&quot;Пароль&quot;, style = TextStyle.BodyLarge.value) },&#10;            modifier = Modifier.padding(top = 8.dp)&#10;        )&#10;          val passwordValidation = ValidationUtils.validateStrongPassword(password)&#10;        if (!passwordValidation.isValid &amp;&amp; password.isNotBlank()) {&#10;            Text(&#10;                text = &quot;Пароль: мин. 8 символов, цифра, заглавная/строчная буквы, спецсимвол (@#$%^&amp;+=)&quot;,&#10;                color = Color.Red,&#10;                fontSize = 11.sp,&#10;                modifier = Modifier&#10;                    .padding(top = 4.dp)&#10;                    .align(Alignment.Start)&#10;            )&#10;        }&#10;        if (errorMessage != null) {&#10;            ErrorCard(&#10;                error = errorMessage!!,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;        &#10;        Button(&#10;            onClick = { viewModel.onLoginClicked(session) },&#10;            enabled = loginEnabled &amp;&amp; !isLoading,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;            ),&#10;            shape = RoundedCornerShape(10.dp),&#10;            modifier = Modifier.padding(top = 16.dp)&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Войти&quot;, color = MaterialTheme.colorScheme.onPrimaryContainer)&#10;            }&#10;        }&#10;        Row(modifier = Modifier.padding(top = 16.dp)) {&#10;            Text(&quot;Нет аккаунта? &quot;, style = TextStyle.BodyMedium.value)&#10;            Text(&#10;                &quot;Зарегистрироваться&quot;,&#10;                style = TextStyle.Link.value,&#10;                color = Theme.extendedColorScheme.onBackgroundPositive,                &#10;                modifier = Modifier.clickable {&#10;                    navController.safeNavigate(&quot;Register&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.diploma.work.ui.feature.auth.login&#13;&#10;&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Row&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.size&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.ButtonDefaults&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import androidx.compose.material3.Icon&#13;&#10;import androidx.compose.material3.IconButton&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.res.stringResource&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.navigation.NavController&#13;&#10;import com.diploma.work.R&#13;&#10;import com.diploma.work.data.AppSession&#13;&#10;import com.diploma.work.ui.DiplomPasswordTextField&#13;&#10;import com.diploma.work.ui.DiplomTextField&#13;&#10;import com.diploma.work.ui.components.ErrorCard&#13;&#10;import com.diploma.work.ui.navigation.Home&#13;&#10;import com.diploma.work.ui.navigation.Register&#13;&#10;import com.diploma.work.ui.navigation.safeNavigate&#13;&#10;import com.diploma.work.ui.navigation.safeNavigateBack&#13;&#10;import com.diploma.work.ui.theme.Text&#13;&#10;import com.diploma.work.ui.theme.TextStyle&#13;&#10;import com.diploma.work.ui.theme.Theme&#13;&#10;import com.diploma.work.utils.ValidationUtils&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun LoginScreen(&#13;&#10;    navController: NavController,&#13;&#10;    session: AppSession,&#13;&#10;    modifier: Modifier = Modifier,&#13;&#10;    viewModel: LoginViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val password by viewModel.password.collectAsState()&#13;&#10;    val loginEnabled by viewModel.loginEnabled.collectAsState()&#13;&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#13;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#13;&#10;    val username by viewModel.username.collectAsState()&#13;&#10;    val loginSuccess by viewModel.loginSuccess.collectAsState()&#13;&#10;    if (loginSuccess) {&#13;&#10;        navController.safeNavigate(&quot;Home&quot;, clearStack = true)&#13;&#10;    }&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp),&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;        verticalArrangement = Arrangement.Center&#13;&#10;    ) {&#13;&#10;        IconButton(onClick = { navController.safeNavigateBack() }) {&#13;&#10;            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = stringResource(R.string.back))&#13;&#10;        }        &#13;&#10;        Text(stringResource(R.string.login), style = TextStyle.TitleLarge.value)&#13;&#10;        &#13;&#10;        DiplomTextField(&#13;&#10;            value = username,&#13;&#10;            onValueChange = { viewModel.onUsernameChanged(it) },&#13;&#10;            label = { Text(stringResource(R.string.email), style = TextStyle.BodyLarge.value) },&#13;&#10;            modifier = Modifier.padding(top = 16.dp)&#13;&#10;        )&#13;&#10;        &#13;&#10;        val emailValidation = ValidationUtils.validateEmail(username)&#13;&#10;        if (!emailValidation.isValid &amp;&amp; username.isNotBlank()) {&#13;&#10;            Text(&#13;&#10;                text = emailValidation.errorMessage ?: &quot;&quot;,&#13;&#10;                color = Color.Red,&#13;&#10;                fontSize = 12.sp,&#13;&#10;                modifier = Modifier&#13;&#10;                    .padding(top = 4.dp)&#13;&#10;                    .align(Alignment.Start)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        &#13;&#10;        DiplomPasswordTextField(&#13;&#10;            value = password,&#13;&#10;            onValueChange = { viewModel.onPasswordChanged(it) },&#13;&#10;            label = { Text(stringResource(R.string.password), style = TextStyle.BodyLarge.value) },&#13;&#10;            modifier = Modifier.padding(top = 8.dp)&#13;&#10;        )&#13;&#10;          val passwordValidation = ValidationUtils.validateStrongPassword(password)&#13;&#10;        if (!passwordValidation.isValid &amp;&amp; password.isNotBlank()) {&#13;&#10;            Text(&#13;&#10;                text = stringResource(R.string.password_requirements),&#13;&#10;                color = Color.Red,&#13;&#10;                fontSize = 11.sp,&#13;&#10;                modifier = Modifier&#13;&#10;                    .padding(top = 4.dp)&#13;&#10;                    .align(Alignment.Start)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        if (errorMessage != null) {&#13;&#10;            ErrorCard(&#13;&#10;                error = errorMessage!!,&#13;&#10;                modifier = Modifier.padding(top = 8.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        &#13;&#10;        Button(&#13;&#10;            onClick = { viewModel.onLoginClicked(session) },&#13;&#10;            enabled = loginEnabled &amp;&amp; !isLoading,&#13;&#10;            colors = ButtonDefaults.buttonColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#13;&#10;                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;            ),&#13;&#10;            shape = RoundedCornerShape(10.dp),&#13;&#10;            modifier = Modifier.padding(top = 16.dp)&#13;&#10;        ) {&#13;&#10;            if (isLoading) {&#13;&#10;                CircularProgressIndicator(&#13;&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;            } else {&#13;&#10;                Text(stringResource(R.string.login), color = MaterialTheme.colorScheme.onPrimaryContainer)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        Row(modifier = Modifier.padding(top = 16.dp)) {&#13;&#10;            Text(stringResource(R.string.no_account), style = TextStyle.BodyMedium.value)&#13;&#10;            Text(&#13;&#10;                stringResource(R.string.register),&#13;&#10;                style = TextStyle.Link.value,&#13;&#10;                color = Theme.extendedColorScheme.onBackgroundPositive,                &#13;&#10;                modifier = Modifier.clickable {&#13;&#10;                    navController.safeNavigate(&quot;Register&quot;)&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/diploma/work/ui/feature/auth/register/RegistrationScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/diploma/work/ui/feature/auth/register/RegistrationScreen.kt" />
              <option name="originalContent" value="package com.diploma.work.ui.feature.auth.register&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.diploma.work.data.AppSession&#10;import com.diploma.work.ui.DiplomPasswordTextField&#10;import com.diploma.work.ui.DiplomTextField&#10;import com.diploma.work.ui.components.ErrorCard&#10;import com.diploma.work.ui.navigation.Login&#10;import com.diploma.work.ui.navigation.safeNavigate&#10;import com.diploma.work.ui.navigation.safeNavigateBack&#10;import com.diploma.work.ui.theme.TextStyle&#10;import com.diploma.work.ui.theme.Theme&#10;import com.diploma.work.utils.ValidationUtils&#10;&#10;@Composable&#10;fun RegistrationScreen(&#10;    navController: NavController,&#10;    session: AppSession,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: RegistrationViewModel = hiltViewModel()&#10;) {&#10;    val email by viewModel.email.collectAsState()&#10;    val password by viewModel.password.collectAsState()&#10;    val confirmPassword by viewModel.confirmPassword.collectAsState()&#10;    val registerEnabled by viewModel.registerEnabled.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    LaunchedEffect(Unit) {&#10;        viewModel.navigationChannel.collect { destination -&gt;&#10;            navController.safeNavigate(destination, clearStack = true)&#10;        }&#10;    }&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        IconButton(onClick = { navController.safeNavigateBack() }) {&#10;            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Назад&quot;)&#10;        }&#10;        Text(&quot;Регистрация&quot;, style = TextStyle.TitleLarge.value)&#10;        &#10;        DiplomTextField(&#10;            value = email,&#10;            onValueChange = { viewModel.onEmailChanged(it) },&#10;            label = { Text(&quot;Email&quot;, style = TextStyle.BodyLarge.value) },&#10;            modifier = Modifier.padding(top = 8.dp)&#10;        )&#10;        &#10;        val emailValidation = ValidationUtils.validateEmail(email)&#10;        if (!emailValidation.isValid &amp;&amp; email.isNotBlank()) {&#10;            Text(&#10;                text = emailValidation.errorMessage ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                fontSize = 12.sp,&#10;                modifier = Modifier&#10;                    .padding(top = 4.dp)&#10;                    .align(Alignment.Start)&#10;            )&#10;        }&#10;        &#10;        DiplomPasswordTextField(&#10;            value = password,&#10;            onValueChange = { viewModel.onPasswordChanged(it) },&#10;            label = { Text(&quot;Пароль&quot;, style = TextStyle.BodyLarge.value) },&#10;            modifier = Modifier.padding(top = 8.dp)&#10;        )        &#10;        if (password.isNotBlank()) {&#10;            val passwordValidation = ValidationUtils.validateStrongPassword(password)&#10;            if (!passwordValidation.isValid) {&#10;                Text(&#10;                    text = &quot;Пароль: мин. 8 символов, цифра, заглавная/строчная буквы, спецсимвол (@#$%^&amp;+=)&quot;,&#10;                    color = Color.Red,&#10;                    fontSize = 11.sp,&#10;                    modifier = Modifier&#10;                        .padding(top = 4.dp)&#10;                        .align(Alignment.Start)&#10;                )&#10;            }&#10;        }&#10;        DiplomPasswordTextField(&#10;            value = confirmPassword,&#10;            onValueChange = { viewModel.onConfirmPasswordChanged(it) },&#10;            label = { Text(&quot;Подтвердите пароль&quot;, style = TextStyle.BodyLarge.value) },&#10;            modifier = Modifier.padding(top = 8.dp)&#10;        )&#10;        &#10;        if (confirmPassword.isNotBlank() &amp;&amp; password != confirmPassword) {&#10;            Text(&#10;                text = &quot;Пароли не совпадают&quot;,&#10;                color = Color.Red,&#10;                fontSize = 12.sp,&#10;                modifier = Modifier&#10;                    .padding(top = 4.dp)&#10;                    .align(Alignment.Start)&#10;            )&#10;        }&#10;        if (errorMessage != null) {&#10;            ErrorCard(&#10;                error = errorMessage!!,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Button(&#10;            onClick = { viewModel.onRegisterClicked(session) },&#10;            enabled = registerEnabled &amp;&amp; !isLoading,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;            ),&#10;            shape = RoundedCornerShape(10.dp),&#10;            modifier = Modifier.padding(top = 16.dp)&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Зарегистрироваться&quot;, color = MaterialTheme.colorScheme.onPrimaryContainer)&#10;            }&#10;        }&#10;        Row(modifier = Modifier.padding(top = 16.dp)) {&#10;            Text(&quot;Уже зарегистрированы? &quot;, style = TextStyle.BodyMedium.value)&#10;            Text(&#10;                &quot;Войти&quot;,&#10;                style = TextStyle.Link.value,&#10;                color = Theme.extendedColorScheme.onBackgroundPositive,&#10;                modifier = Modifier.clickable {&#10;                    navController.safeNavigate(&quot;Login&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.diploma.work.ui.feature.auth.register&#13;&#10;&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Row&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.size&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material.icons.filled.Check&#13;&#10;import androidx.compose.material.icons.filled.Close&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.ButtonDefaults&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import androidx.compose.material3.Icon&#13;&#10;import androidx.compose.material3.IconButton&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.LaunchedEffect&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.res.stringResource&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.navigation.NavController&#13;&#10;import com.diploma.work.R&#13;&#10;import com.diploma.work.data.AppSession&#13;&#10;import com.diploma.work.ui.DiplomPasswordTextField&#13;&#10;import com.diploma.work.ui.DiplomTextField&#13;&#10;import com.diploma.work.ui.components.ErrorCard&#13;&#10;import com.diploma.work.ui.navigation.Login&#13;&#10;import com.diploma.work.ui.navigation.safeNavigate&#13;&#10;import com.diploma.work.ui.navigation.safeNavigateBack&#13;&#10;import com.diploma.work.ui.theme.TextStyle&#13;&#10;import com.diploma.work.ui.theme.Theme&#13;&#10;import com.diploma.work.utils.ValidationUtils&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun RegistrationScreen(&#13;&#10;    navController: NavController,&#13;&#10;    session: AppSession,&#13;&#10;    modifier: Modifier = Modifier,&#13;&#10;    viewModel: RegistrationViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val email by viewModel.email.collectAsState()&#13;&#10;    val password by viewModel.password.collectAsState()&#13;&#10;    val confirmPassword by viewModel.confirmPassword.collectAsState()&#13;&#10;    val registerEnabled by viewModel.registerEnabled.collectAsState()&#13;&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#13;&#10;    val isLoading by viewModel.isLoading.collectAsState()&#13;&#10;    LaunchedEffect(Unit) {&#13;&#10;        viewModel.navigationChannel.collect { destination -&gt;&#13;&#10;            navController.safeNavigate(destination, clearStack = true)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    Column(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp),&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;        verticalArrangement = Arrangement.Center&#13;&#10;    ) {&#13;&#10;        IconButton(onClick = { navController.safeNavigateBack() }) {&#13;&#10;            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = stringResource(R.string.back))&#13;&#10;        }&#13;&#10;        Text(stringResource(R.string.registration), style = TextStyle.TitleLarge.value)&#13;&#10;        &#13;&#10;        DiplomTextField(&#13;&#10;            value = email,&#13;&#10;            onValueChange = { viewModel.onEmailChanged(it) },&#13;&#10;            label = { Text(stringResource(R.string.email), style = TextStyle.BodyLarge.value) },&#13;&#10;            modifier = Modifier.padding(top = 8.dp)&#13;&#10;        )&#13;&#10;        &#13;&#10;        val emailValidation = ValidationUtils.validateEmail(email)&#13;&#10;        if (!emailValidation.isValid &amp;&amp; email.isNotBlank()) {&#13;&#10;            Text(&#13;&#10;                text = emailValidation.errorMessage ?: &quot;&quot;,&#13;&#10;                color = Color.Red,&#13;&#10;                fontSize = 12.sp,&#13;&#10;                modifier = Modifier&#13;&#10;                    .padding(top = 4.dp)&#13;&#10;                    .align(Alignment.Start)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        &#13;&#10;        DiplomPasswordTextField(&#13;&#10;            value = password,&#13;&#10;            onValueChange = { viewModel.onPasswordChanged(it) },&#13;&#10;            label = { Text(stringResource(R.string.password), style = TextStyle.BodyLarge.value) },&#13;&#10;            modifier = Modifier.padding(top = 8.dp)&#13;&#10;        )        &#13;&#10;        if (password.isNotBlank()) {&#13;&#10;            val passwordValidation = ValidationUtils.validateStrongPassword(password)&#13;&#10;            if (!passwordValidation.isValid) {&#13;&#10;                Text(&#13;&#10;                    text = stringResource(R.string.password_requirements),&#13;&#10;                    color = Color.Red,&#13;&#10;                    fontSize = 11.sp,&#13;&#10;                    modifier = Modifier&#13;&#10;                        .padding(top = 4.dp)&#13;&#10;                        .align(Alignment.Start)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;        DiplomPasswordTextField(&#13;&#10;            value = confirmPassword,&#13;&#10;            onValueChange = { viewModel.onConfirmPasswordChanged(it) },&#13;&#10;            label = { Text(stringResource(R.string.confirm_password), style = TextStyle.BodyLarge.value) },&#13;&#10;            modifier = Modifier.padding(top = 8.dp)&#13;&#10;        )&#13;&#10;        &#13;&#10;        if (confirmPassword.isNotBlank() &amp;&amp; password != confirmPassword) {&#13;&#10;            Text(&#13;&#10;                text = stringResource(R.string.passwords_dont_match),&#13;&#10;                color = Color.Red,&#13;&#10;                fontSize = 12.sp,&#13;&#10;                modifier = Modifier&#13;&#10;                    .padding(top = 4.dp)&#13;&#10;                    .align(Alignment.Start)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        if (errorMessage != null) {&#13;&#10;            ErrorCard(&#13;&#10;                error = errorMessage!!,&#13;&#10;                modifier = Modifier.padding(top = 8.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        Button(&#13;&#10;            onClick = { viewModel.onRegisterClicked(session) },&#13;&#10;            enabled = registerEnabled &amp;&amp; !isLoading,&#13;&#10;            colors = ButtonDefaults.buttonColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#13;&#10;                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;            ),&#13;&#10;            shape = RoundedCornerShape(10.dp),&#13;&#10;            modifier = Modifier.padding(top = 16.dp)&#13;&#10;        ) {&#13;&#10;            if (isLoading) {&#13;&#10;                CircularProgressIndicator(&#13;&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;            } else {&#13;&#10;                Text(stringResource(R.string.register), color = MaterialTheme.colorScheme.onPrimaryContainer)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        Row(modifier = Modifier.padding(top = 16.dp)) {&#13;&#10;            Text(stringResource(R.string.already_registered), style = TextStyle.BodyMedium.value)&#13;&#10;            Text(&#13;&#10;                stringResource(R.string.login),&#13;&#10;                style = TextStyle.Link.value,&#13;&#10;                color = Theme.extendedColorScheme.onBackgroundPositive,&#13;&#10;                modifier = Modifier.clickable {&#13;&#10;                    navController.safeNavigate(&quot;Login&quot;)&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>